// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Weather.Infra.Context;

#nullable disable

namespace Weather.Infra.Migrations
{
    [DbContext(typeof(DbSqlServerContext))]
    [Migration("20231023025236_InitMigrations")]
    partial class InitMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Weather.Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Weather.Domain.Entities.Weather", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CloudsAll")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FeelsLike")
                        .HasColumnType("float");

                    b.Property<int>("Humidity")
                        .HasColumnType("int");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Pressure")
                        .HasColumnType("int");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<double>("TemperatureMax")
                        .HasColumnType("float");

                    b.Property<double>("TemperatureMin")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.Property<string>("WeatherDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeatherIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WeatherId")
                        .HasColumnType("int");

                    b.Property<string>("WeatherMain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Weather");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Weather");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Weather.Domain.Entities.CurrentWeather", b =>
                {
                    b.HasBaseType("Weather.Domain.Entities.Weather");

                    b.HasDiscriminator().HasValue("CurrentWeather");
                });

            modelBuilder.Entity("Weather.Domain.Entities.DailyWeather", b =>
                {
                    b.HasBaseType("Weather.Domain.Entities.Weather");

                    b.Property<int?>("GroundLevel")
                        .HasColumnType("int");

                    b.Property<double?>("Pop")
                        .HasColumnType("float");

                    b.Property<double>("RainVolume")
                        .HasColumnType("float");

                    b.Property<int?>("SeaLevel")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("DailyWeather");
                });

            modelBuilder.Entity("Weather.Domain.Entities.Weather", b =>
                {
                    b.HasOne("Weather.Domain.Entities.Location", "Location")
                        .WithMany("Weather")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Weather.Domain.Entities.Location", b =>
                {
                    b.Navigation("Weather");
                });
#pragma warning restore 612, 618
        }
    }
}
